buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:${docker_compose_plugin_version}"
        classpath 'org.owasp:dependency-check-gradle:5.2.1'
    }
}

plugins {
    id 'java-library'
    id 'org.springframework.boot' version "${spring_boot_version}"
    id 'io.spring.dependency-management' version "${spring_dependency_management_version}"
    id "com.gorylenko.gradle-git-properties" version "${git_properties_plugin_version}"
    id "com.github.spotbugs" version "4.5.0" apply false
    id "org.sonarqube" version "3.0" apply false
}
apply plugin: 'idea'
apply plugin: 'docker-compose'
apply from: 'gradle/tests.gradle'
apply from: 'gradle/static-checks.gradle'

group = 'com.sivalabs'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation "org.springframework.cloud:spring-cloud-starter-aws-messaging"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.flywaydb:flyway-core'
    compileOnly 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.webjars:bootstrap:${bootstrap_version}"
    implementation "org.webjars:font-awesome:${font_awesome_version}"
    implementation "org.webjars:vue:${vue_version}"
    implementation "io.springfox:springfox-boot-starter:${swagger_version}"

    implementation "org.apache.commons:commons-lang3:${commons_lang_version}"
    implementation "commons-io:commons-io:${commons_io_version}"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation "com.tngtech.archunit:archunit-junit5:${archunit_junit5_version}"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
    testImplementation "org.testcontainers:localstack"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${spring_cloud_version}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainers_version}"
    }
}

springBoot {
    buildInfo()
}

bootJar {
    launchScript()
}

bootBuildImage {
    imageName = "sivaprasadreddy/spring-boot-awsdemo"
}

dockerCompose {
    environment.put 'TMPDIR', "/private"
    useComposeFiles = ['docker-compose.yml']
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

if (project.hasProperty("local")) {
    bootRun {
        args = ["--spring.profiles.active=local"]
    }
    bootRun.dependsOn composeUp
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

wrapper {
    gradleVersion = "6.7.1"
}
